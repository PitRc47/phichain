name: step.build

on:
  workflow_call:
    inputs:
      release:
        type: boolean
        required: false
        default: false

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - platform: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - platform: windows
            os: windows-latest
            target: aarch64-pc-windows-msvc

          - platform: macOS
            os: macOS-latest
            target: x86_64-apple-darwin
          - platform: macOS
            os: macOS-latest
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Cache cargo files
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # https://github.com/bevyengine/bevy/blob/main/docs/linux_dependencies.md
      - name: Install dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ pkg-config libx11-dev libasound2-dev libudev-dev libxkbcommon-x11-0
          sudo apt-get install -y libwayland-dev libxkbcommon-dev

      - name: Get version
        id: version
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: phichain-editor/Cargo.toml
          field: package.version

      # Dev: 0.1.0+build.10
      # Release: 0.1.0
      - name: Generate full version
        id: full_version
        shell: bash
        run: |
          if [ "${{ inputs.release }}" == "true" ]; then
            echo "phichain_version=${{ steps.version.outputs.value }}" >> $GITHUB_OUTPUT
          else
            echo "phichain_version=${{ steps.version.outputs.value }}+build.${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      # phichain-v0.1.0+build-x86_64-pc-windows-msvc
      - name: Generate build name
        id: build_name
        shell: bash
        run: |
          echo "build_name=phichain-v${{ steps.full_version.outputs.phichain_version }}-${{ matrix.target }}" >> $GITHUB_OUTPUT

      - name: Update version in Cargo.toml
        uses: colathro/toml-editor@1.1.0
        with:
          file: phichain-editor/Cargo.toml
          key: package.version
          value: ${{ steps.full_version.outputs.phichain_version }}

      - name: Run rustfmt check
        run: cargo fmt --all -- --check

      - name: Run clippy check
        run: cargo clippy --all-features --all-targets -- -D warnings

      - name: Test with cargo test
        run: cargo test

      - name: Build with cargo
        # build all binary crates separately, see:
        # https://github.com/rust-lang/cargo/issues/10636
        # https://github.com/rust-lang/cargo/issues/4463
        run: |
          cargo build -p phichain --release --target ${{ matrix.target }}
          cargo build -p phichain-converter --release --target ${{ matrix.target }}
          cargo build -p phichain-renderer --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1

      - name: Build archive
        shell: bash
        run: |
          mkdir build
          if [ "${{ matrix.platform }}" == "windows" ]; then
            cp ./target/${{ matrix.target }}/release/phichain.exe "./build/phichain.exe"
            cp ./target/${{ matrix.target }}/release/phichain-converter.exe "./build/phichain-converter.exe"
            cp ./target/${{ matrix.target }}/release/phichain-renderer.exe "./build/phichain-renderer.exe"
          else
            cp ./target/${{ matrix.target }}/release/phichain "./build/phichain"
            cp ./target/${{ matrix.target }}/release/phichain-converter "./build/phichain-converter"
            cp ./target/${{ matrix.target }}/release/phichain-renderer "./build/phichain-renderer"
          fi

          mv LICENSE README.md README_en.md assets phichain-editor/lang ./build

      - name: Move Windows files
        if: matrix.platform == 'windows'
        shell: bash
        run: |
          mv start.bat ./build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_name.outputs.build_name }}
          path: build
